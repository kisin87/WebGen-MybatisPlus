package ${package.Controller};

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import ${package.Service}.${table.serviceName};
<% if(swagger2){ %>
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
<% } %>
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import com.kisin.gen.common.pagination.Page;
import ${package.Entity}.${entity};
import com.kisin.gen.common.data.Result;
import com.kisin.gen.common.data.ResultCode;

<% if(restControllerStyle){ %>
import org.springframework.web.bind.annotation.RestController;
<% }else{ %>
import org.springframework.stereotype.Controller;
<% } %>
<% if(isNotEmpty(superControllerClassPackage)){ %>
import ${superControllerClassPackage};
<% } %>

/**
 * <p>
 * ${table.comment!} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
<% if(restControllerStyle){ %>
@RestController
<% }else{ %>
@Controller
<% } %>
@RequestMapping("<% if(isNotEmpty(package.ModuleName)){ %>/${package.ModuleName}<% } %>/<% if(isNotEmpty(controllerMappingHyphenStyle)){ %>${controllerMappingHyphen}<% }else{ %>${table.entityPath}<% } %>")
<% if(swagger2){ %>
@Api(value = "${table.comment}的接口",tags = {"${table.comment}的controller"})
<% } %>
<% if(kotlin){ %>
class ${table.controllerName}<% if(isNotEmpty(superControllerClass)){ %> : ${superControllerClass}()<% } %>
<% }else{ %>
    <% if(isNotEmpty(superControllerClass)){ %>
public class ${table.controllerName} extends ${superControllerClass} {
    <% }else{ %>
public class ${table.controllerName} {
    <% } %>

    @Autowired
    ${table.serviceName} ${classNameToField(table.serviceName)};

    @GetMapping("/list")
    String list(){
        return "${config.packageInfo.ModuleName}/list";
    }

    @ResponseBody
    @PostMapping("/list")
    <% if(swagger2){ %>
    @ApiOperation(value = "${table.comment!}列表",notes = "${table.comment!}列表数据，分页数据", httpMethod = "POST")
    @ApiImplicitParams({
        @ApiImplicitParam(name = "offset",value = "起始数据行", required = true, paramType = "path"),
        @ApiImplicitParam(name = "limit",value = "每页数据行数", required = true, paramType = "path"),
    })
    <% } %>
    Page<${entity}> list(Page<${entity}> page){
        <% if(table.haveDict){ %>
        return (Page<${entity}>)${classNameToField(table.serviceName)}.findAllInfo(page);
        <% }else{ %>
        return (Page<${entity}>)${classNameToField(table.serviceName)}.page(page);
        <% } %>
    }

    @GetMapping("/view")
    String view() {
        return "${config.packageInfo.ModuleName}/view";
    }

    @ResponseBody
    @PostMapping("/data")
    <% if(swagger2){ %>
    @ApiOperation(value = "${table.comment!}数据",notes = "${table.comment!}数据，根据主键或唯一组合条件", httpMethod = "POST")
    @ApiImplicitParams({
    <% for(field in table.fields){%>
        @ApiImplicitParam(name = "${field.propertyName}",value = "${field.lableName}"),
    <%}%>
    })
    <% } %>
    Result<${entity}> data(${entity} ${classNameToField(entity)}) {
        return new Result<>().
            setCode(ResultCode.SUCCESS).
            setData(${classNameToField(table.serviceName)}.getOne(new QueryWrapper<>(${classNameToField(entity)})));
    }

    @GetMapping("/edit")
    String edit() {
        return "${config.packageInfo.ModuleName}/edit";
    }

    @ResponseBody
    @PostMapping("/edit")
    <% if(swagger2){ %>
    @ApiOperation(value = "${table.comment!}数据新增修改",notes = "${table.comment!}数据的新增或修改，主键数据存在则为修改", httpMethod = "POST")
    @ApiImplicitParams({
    <% for(field in table.fields){%>
        @ApiImplicitParam(name = "${field.propertyName}",value = "${field.lableName}"),
    <%}%>
    })
    <% } %>
    Result<${entity}> edit(${entity} ${classNameToField(entity)}) {
        ${classNameToField(table.serviceName)}.saveOrUpdate(${classNameToField(entity)});
        return new Result<>().
            setCode(ResultCode.SUCCESS).
            setData(${classNameToField(entity)});
    }

    @ResponseBody
    @PostMapping("/remove")
    <% if(swagger2){ %>
    @ApiOperation(value = "${table.comment!}数据删除",notes = "${table.comment!}数据删除，根据主键或唯一组合条件，删除指定的数据", httpMethod = "POST")
    @ApiImplicitParams({
    <% for(field in table.fields){%>
        @ApiImplicitParam(name = "${field.propertyName}",value = "${field.lableName}"),
    <%}%>
    })
    <% } %>
    Result<${entity}> remove(${entity} ${classNameToField(entity)}){
        ${classNameToField(table.serviceName)}.remove(new QueryWrapper<>(${classNameToField(entity)}));
        return new Result<>().
        setCode(ResultCode.SUCCESS).
        setData(${classNameToField(entity)});
    }

}
<% } %>
